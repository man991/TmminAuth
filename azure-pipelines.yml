trigger:
- main  # Adjust to your branch name

pool:
  vmImage: 'ubuntu-20.04'  # Use an Ubuntu-based agent

variables:
  dockerImageName: 'TmminDockerTest'
  sshHost: '54.255.179.58'  # The public IP of your EC2 instance
  sshUser: 'ubuntu'  # EC2 username ('ec2-user' for Amazon Linux or 'ubuntu' for Ubuntu)
  sshKey: $(sshKey)  # The private key stored in Azure DevOps pipeline variables
  containerName: 'tmmin-auth-test'

jobs:
- job: BuildAndDeploy
  displayName: 'Build, Save Docker Image, and Deploy to EC2'
  steps:


    - task: SSH@0
      inputs:
        sshEndpoint: 'Toms Dev AWS'
        runOptions: 'inline'
        inline: 'ls'
        readyTimeout: '20000'
      displayName: 'Login to aws server'

    # Step 3: Save the Docker image as a tarball (Docker save)
    - script: |
        cd testingdeploy
        sudo docker build -t tom-web-pipe-demo .
        sudo docker run -d -p 5008:80 --restart=always --name tom-pipe-container tom-web-pipe-demo
      displayName: 'docker build and run'

    # Step 4: Transfer the Docker image tarball to EC2 via SCP
    # - task: SCP@0
    #   displayName: 'Transfer Docker Image to EC2'
    #   inputs:
    #     sshEndpoint: 'Toms Dev AWS'  # The name of your SSH service connection
    #     sourcePath: '$(dockerImageName)_$(Build.BuildId).tar'
    #     targetPath: '/home/ubuntu/$(dockerImageName)_$(Build.BuildId).tar'  # Adjust path as needed

    # Step 5: SSH into EC2 and load the Docker image
    # - task: SSH@0
    #   displayName: 'Load Docker Image and Run Container on EC2'
    #   inputs:
    #     sshEndpoint: 'Toms Dev AWS'
    #     scriptPath: './deploytmminauthtest.sh'  # Path to your deployment script
    #     failOnStandardError: true
